#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import re

class Parser :

    def __init__( self, line ) :
        self.line = re.sub('[\s]+', '', line)


    def parse( self ) :
        ret = True
        line = self.line

        for c in line :
            if c not in "0123456789^+-=*X." :
                print "Wrong character found (" + c + ")"
                ret = False

        nb = "[\+\-]?([0-9]*\.?|\.)[0-9]*"
        x = nb + "X(" + "\^\+?[0-2])?"
        s = ""
        if line[0] == "*" : s +="Error : The line begins with '*'\n"
        if re.search("[^X]\^", line) != None : s += "Error : An exponent has to follow an 'X'\n"
        if re.search("[\-\+\^\*]$", line) != None : s += "Error : The line has an unexpected end\n"
        if re.search("(\.X|X\.)", line) != None  : s += "Error : A '.' and a 'X' can't be together\n"
        if re.search("\.[0-9]*\.", line) != None : s += "Error : Two '.' have been found in one term\n"
        if re.search("[=\+\-\*]\.[=\+\-\*]", line) != None : s += "Error : A lonely '.' has been found\n"
        if re.search(x + "\*" + x, line) != None : s += "Error : Two unknown operands can't be multiplied\n"
        if re.search("(\-|\*|\+)[\*=]", line) != None : s += "Error : Two operators have been found together\n"
        if re.search("(\+\-|\-\+|\-\-)[\-=\+\*]", line) != None : s += "Error : Three following operators have been found\n"
        if re.search("\*(" + nb + "|" + x + ")\*", line) != None : s += "Error : Only two operand can't be mulplied together\n"
        if re.search("\^([X\.\-\*=]|\+?[0-2]\.)", line) != None : s += "Error : An exponent has to be followed by an integer numerical value\n"
        if re.search("\^\+?([3-9]|[0-2]?\*?X)", line) != None : s += "Error : An exponent has to be between 0 and 2, and two unknown operands can't be multiplied\n"
        if s != "" :
            ret = False
            print s[:-1]

        line = line.replace("+-", "-")
        line = line.replace("-+", "-")
        line = line.replace("++", "+")
        line = line.replace("--", "+")
        line = line.replace("^+", "^")

        ind1 = line.find("=")
        ind2 = line.rfind("=")
        if ind1 == -1 : line += "=0"
        elif ind1 == 0 : line = "0" + line
        elif ind2 == len(line) - 1 : line += "0"

        if ind1 != ind2:
            print "A single '=' character is expected"
            ret = False

        self.line = line

        return ret


    def __getNb( self, line ) :
        nb = ""
        for c in line :
            if c not in "0123456789.+-" or (c in "+-" and nb != "") :
                break
            nb += c
        return nb


    def __analyseSide( self, tab, side, sens ) :
        while side != "" :
            nb1 = self.__getNb(side)
            side = side[len(nb1):]
            nb1 = float(nb1) if nb1 != "" and nb1 not in "+-" else -1. if nb1 == "-" else 1.

            exp = 0;
            if len(side) and side[0] == "X" :
                exp = 1
                side = side[1:]
                if len(side) and side[0] == "^" :
                    exp = self.__getNb(side[1:])
                    side = side[1 + len(exp):]
                else : tab[3] = True
            
            nb2 = 1.
            if len(side) and side[0] == "*" :
                nb2 = self.__getNb(side[1:])
                side = side[1 + len(nb2):]
                nb2 = float(nb2) if nb2 != "" and nb2 not in "+-" else -1. if nb2 == "-" else 1.

            if len(side) and side[0] == "X" :
                exp = 1
                side = side[1:]
                if len(side) and side[0] == "^" :
                    exp = self.__getNb(side[1:])
                    side = side[1 + len(exp):]
                else : tab[3] = True
            else : tab[3] = True

            tab[int(exp)] += (nb1 * nb2) * sens


    def getInfos( self ) :
        tab = [0, 0, 0, False]
        sides = self.line.split("=")
        self.__analyseSide(tab, sides[0], 1)
        self.__analyseSide(tab, sides[1], -1)
        return tab


class Solver:

    def __init__( self, infos ) :
        self.isNatural = infos[3]
        self.a = infos[2]
        self.b = infos[1]
        self.c = infos[0]
        self.degree = 2 if self.a != 0 else 1 if self.b != 0 else 0


    def __sqrt( self, nb ) :
        tmp = 1.0
        last = 0;0
        while( tmp != last and abs(nb / tmp - tmp) > sys.float_info.epsilon ):
            last = tmp
            tmp = (tmp + nb / tmp) / 2.0
        return tmp


    def __getVal( self, nb ) :
        if nb - int(nb) == 0 :
            return int(nb)
        else :
            s = str(nb)
            pos = s.find(".")
            if len(s[pos + 1:]) > 6 :
                return float(s[:pos + 6] + (s[pos + 6] if s[pos + 7] < "5" else str(int(s[pos + 6]) + 1)))
            else :
                return nb


    def __getElem( self, val, exp ) :
        if self.isNatural == False :
            return str(self.__getVal(val)) + " * X^" + str(exp)

        s = str(self.__getVal(val)) if abs(val) != 1 else ""
        if exp == 0 and s == "" : s += "X^0" if val >= 0 else "-X^0"
        elif exp == 1 : s += "X"
        elif exp == 2 : s += "XÂ²"
        return s


    def printReduced( self ) :
        s = ""
        first = True

        if self.c != 0 :
            if first == True : s += str(self.__getElem(self.c, 0)) + " "
            else : s += ("+ " if self.c >= 0 else "- ") + str(self.__getElem(abs(self.c), 0)) + " "
            first = False
        if self.b != 0 :
            if first == True : s += str(self.__getElem(self.b, 1)) + " "
            else : s += ("+ " if self.b >= 0 else "- ") + str(self.__getElem(abs(self.b), 1)) + " "
            first = False
        if self.a != 0 :
            if first == True : s += str(self.__getElem(self.a, 2)) + " "
            else : s += ("+ " if self.a >= 0 else "- ") + str(self.__getElem(abs(self.a), 2)) + " "
            first = False
        print "Reduced form: "+ (s if s != "" else "0 * X^0 ") + "= 0"


    def printDegree( self ) :
        print "Polynomial degree:", self.degree


    def printResult( self ) :
        if self.degree == 0 :
            if self.c == 0 : print "All the real numbers are solution"
            else : print "The equation is false"
        elif self.degree == 1 :
            print "The solution is :"
            print self.__getVal(-self.c / self.b)
        else :
            disc = self.b * self.b - 4 * self.a * self.c
            if disc == 0 :
                print "Discriminant is null, the solution is :"
                print self.__getVal(-self.b / (2 * self.a))
            elif disc > 0 :
                print "Discriminant is strictly positive, the two solutions are :"
                print self.__getVal(((-self.b) - self.__sqrt(disc)) / (2 * self.a))
                print self.__getVal(((-self.b) + self.__sqrt(disc)) / (2 * self.a))
            else :
                print "Discriminant is strictly negative, the two solutions are :"
                print str(self.__getVal(-self.b / (2 * self.a))) + " - i * " + str(self.__getVal(self.__sqrt(-disc) / (2 * self.a)))
                print str(self.__getVal(-self.b / (2 * self.a))) + " + i * " + str(self.__getVal(self.__sqrt(-disc) / (2 * self.a)))


if __name__ == "__main__" :

    if len(sys.argv) != 2 : sys.exit(0)

    parser = Parser(sys.argv[1])
    if parser.parse() == False : sys.exit(0)

    solver = Solver(parser.getInfos())
    solver.printReduced()
    solver.printDegree()
    solver.printResult()
